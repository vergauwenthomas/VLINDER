#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Feb 14 09:02:45 2022

This script reorders the folder structure generated by the vlidnerdata_formatter so it is easely imported 
as a google drive database.

@author: thoverga
"""
import shutil
# import pandas as pd
import os 
import path_handler as ph

print("Make google compatible DB (run after the fisheye generator step!)")

#%%
subfolders_naming = {
    "metingen_data": "_metingen", #folder postfix for google readable observations
    "rayman_data": "_hittestress", #folder postfix for google readable rayman output
    "barplots": "_hittestress_barplot_figures", #folder postfix for google readable barplots
    "timeseries": '_hittestress_timeseries_figuren', #folder postfix for google readable observations
    }
fisheye_folder_name = 'fisheye_fotos'





def make_dir_if_needed(dirpath):
    #check if dirpath exist and make if it does not exist
    if not os.path.exists(dirpath):
        os.makedirs(dirpath)

#make google db folder
make_dir_if_needed(ph.google_db)
make_dir_if_needed(os.path.join(ph.google_db, fisheye_folder_name))





#copy fisheye fotos (only the jpgs)
vlinderlist = ['Vlinder' + str(x).zfill(2) for x in ph.stationnumbers]
for station in vlinderlist:
    path_to_fisheye = os.path.join(ph.db_location, station, station+'_fisheye.' + ph.fisheye_foto_format)
    if os.path.exists(path_to_fisheye):
        shutil.copy(path_to_fisheye, os.path.join(ph.google_db, fisheye_folder_name))





#copy files specific for each station and experiment
for period in ph.paths_dict:
    for experiment in ph.paths_dict[period]['scenario']:
        settings = ph.paths_dict[period]['scenario'][experiment]
        
        #----------------observation data---------------
        exportfolder = os.path.join(ph.google_db, settings['google_db_folder_base_name'] + subfolders_naming['metingen_data'])
        make_dir_if_needed(exportfolder)
        
        vlinderlist = ['Vlinder' + str(x).zfill(2) for x in ph.stationnumbers]
        
        for station in vlinderlist:
            
            #get location of the datafile
            datafile = os.path.join(ph.db_location, station, ph.datafoldername, station + settings['google_sheets_postfix'])
            
            if not (os.path.exists(datafile)):
                continue
        
            shutil.copy(datafile, exportfolder)
            
            
        #----------------Rayman data---------------
        exportfolder = os.path.join(ph.google_db, settings['google_db_folder_base_name'] + subfolders_naming['rayman_data'])
        make_dir_if_needed(exportfolder)
        
        vlinderlist = ['Vlinder' + str(x).zfill(2) for x in ph.stationnumbers]
        
        for station in vlinderlist:
            
            #get location of the datafile
            datafile = os.path.join(ph.db_location, station, ph.raymanfoldername, station + settings['google_sheets_rayman_output_postfix'])
            
            if not (os.path.exists(datafile)):
                continue
        
            shutil.copy(datafile, exportfolder)
        
        
        #----------------Barplots---------------
        exportfolder = os.path.join(ph.google_db, settings['google_db_folder_base_name'] + subfolders_naming['barplots'])
        make_dir_if_needed(exportfolder)
        
        vlinderlist = ['Vlinder' + str(x).zfill(2) for x in ph.stationnumbers]
        
        for station in vlinderlist:
            
            #get location of the datafile
            datafile = os.path.join(ph.db_location, station, ph.raymanfoldername, station + settings['barplot_postfix'])
            
            if not (os.path.exists(datafile)):
                continue
        
            shutil.copy(datafile, exportfolder)
            
            
        #----------------Timeseries---------------
        exportfolder = os.path.join(ph.google_db, settings['google_db_folder_base_name'] + subfolders_naming['timeseries'])
        make_dir_if_needed(exportfolder)
        
        vlinderlist = ['Vlinder' + str(x).zfill(2) for x in ph.stationnumbers]
        
        for station in vlinderlist:
            
            #get location of the datafile
            datafile = os.path.join(ph.db_location, station, ph.raymanfoldername, station + settings['timeseriesplot_postfix'])
            
            if not (os.path.exists(datafile)):
                continue
        
            shutil.copy(datafile, exportfolder)
            


            



#%%

# for key in path_map:
#     print(key)
#     dbfolder = os.path.join(ph.google_db, key)
#     if not (os.path.exists(dbfolder)):
#         print('Folder not found, this will be created: ', dbfolder)
#         os.makedirs(dbfolder)

#     vlinderlist = ['Vlinder' + str(x).zfill(2) for x in ph.stationnumbers]
    
#     for station in vlinderlist:
        
#         #get location of the datafile
#         datafile = os.path.join(ph.db_location, station, ph.datafoldername, station + path_map[key]['postfix'])
        
#         if not (os.path.exists(datafile)):
#             print('File not found for station ', station)
#             continue
    
#         shutil.copy(datafile, dbfolder)
        
